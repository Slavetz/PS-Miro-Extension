function testFunction() {    let savePath = File.saveDialog('Save path','*.miro');    if (savePath === null) return;    return decodeURI(savePath.relativeURI);}function getPages(options) {    const { scale } = options;    /** Получаем страницы */    let pages = getSLidesObjectFromInDesign(scale);    if (pages === undefined) return;    /** Диалог сохранения файла */    let savePath = File.saveDialog('Save path','*.miro');    if (savePath === null) return;    return JSON.stringify({ path: decodeURI(savePath.relativeURI), pages: pages });}function exportPages(options){    const { pages, path, scale } = options;    /** Пишем все картинки */    exportImagesFromInDesign(pages,path,scale);    exportJSON(pages,path);    return true;}/**+++++++++++++++++++++++++++++++++++++++++++++++++**//**+++++++++++++++++++++++++++++++++++++++++++++++++**/function getSLidesObjectFromInDesign(scale){    const document = app.activeDocument;    const layername = 'prop';    let propLayer = document.layers.itemByName(layername);    if (!propLayer.isValid) {        throw new Error('!!!Prop Layer is absent!!!');    }    const hmu = document.viewPreferences.horizontalMeasurementUnits;    const vmu = document.viewPreferences.verticalMeasurementUnits;    document.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.PIXELS;    document.viewPreferences.verticalMeasurementUnits = MeasurementUnits.PIXELS;    const pages = document.pages;    let propLayerItems = document.layers.itemByName(layername).pageItems;    let propSlides = propLayerItems.filter(el=>{        return (el.name === 'slide_prop_table');    });    let mod = 1;    let cur_sld = '';    let prevSpredWidth = 0;    let currSpredWidth = 0;    let slides_obj = propSlides.map(item => {        let content = item.tables[0].columns[1].contents;        const e = item.parent.index;        const el = pages[e];        const sld = content[0].replace(/\s+/,'');        if (cur_sld !== sld) {            mod = 1;            prevSpredWidth = prevSpredWidth + currSpredWidth + 500 * scale;            currSpredWidth = 0;        } else {            mod += 1        }        cur_sld = sld;        let h = (el.bounds[2]-el.bounds[0]) * scale;        let w = (el.bounds[3]-el.bounds[1]) * scale;        if (currSpredWidth < el.bounds[3] * scale) { currSpredWidth = el.bounds[3] * scale }        return {            title: 'Slide ' + sld + ' : Page ' + mod,            externalId: el.id,            filename: el.id + '.jpg',            pageStr: el.appliedAlternateLayout.alternateLayout + ':' + (e+1),            y: h * 0.5 + h * 1.2 * mod,            x: w * 0.5 + el.bounds[1] * scale + prevSpredWidth,            height: h,            width: w,        }    });    slides_obj = slides_obj.filter(el => el !== undefined);    document.viewPreferences.horizontalMeasurementUnits = hmu;    document.viewPreferences.verticalMeasurementUnits = vmu;    return slides_obj;}function exportImagesFromInDesign(pages,path,scale){    pages.forEach((page)=>{        let file = new File(path + page.filename);        app.jpegExportPreferences.jpegExportRange = ExportRangeOrAllPages.EXPORT_RANGE;        app.jpegExportPreferences.pageString = page.pageStr;        app.jpegExportPreferences.exportResolution = 72 * scale;        app.jpegExportPreferences.jpegQuality = JPEGOptionsQuality.HIGH;        //	app.jpegExportPreferences.jpegQuality = JPEGOptionsQuality.MAXIMUM;        document.exportFile(ExportFormat.JPG, file);    });}/**+++++++++++++++++++++++++++++++++++++++++++++++++**//**+++++++++++++++++++++++++++++++++++++++++++++++++**/function exportJSON(json,saveStr) {    let file = new File(saveStr + 'images.json');    file.encoding = "utf-8";    file.open("w");    let jsonFileStr = JSON.stringify(json);    file.write(jsonFileStr);    file.close();    return null;}function coreAlert(message) { alert(message) }